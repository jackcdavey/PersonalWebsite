"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var react_spring_1 = require("react-spring");
var newText = function (text) { return ({ key: "" + Date.now(), data: text }); };
var TextTransition = function (_a) {
    var text = _a.text, direction = _a.direction, inline = _a.inline, delay = _a.delay, className = _a.className, style = _a.style, noOverflow = _a.noOverflow, springConfig = _a.springConfig;
    var placeholderRef = React.useRef(null);
    var _b = React.useState(function () { return newText(text.toString()); }), content = _b[0], setContent = _b[1];
    var _c = React.useState(0), timeoutId = _c[0], setTimeoutId = _c[1];
    var _d = React.useState(true), isFirstRun = _d[0], setIsFirstRun = _d[1];
    var _e = React.useState({ width: inline ? 0 : "auto" }), width = _e[0], setWidth = _e[1];
    var transitions = react_spring_1.useTransition(content, function (item) { return item.key; }, {
        from: { opacity: 0, transform: "translateY(" + (direction === "down" ? "-100%" : "100%") + ")" },
        enter: { opacity: 1, transform: "translateY(0%)" },
        leave: { opacity: 0, transform: "translateY(" + (direction === "down" ? "100%" : "-100%") + ")" },
        config: springConfig,
        immediate: isFirstRun,
        onDestroyed: function () {
            setIsFirstRun(false);
        }
    });
    var animatedProps = react_spring_1.useSpring({
        to: width,
        config: springConfig,
        immediate: isFirstRun,
    });
    React.useEffect(function () {
        setTimeoutId(setTimeout(function () {
            if (!placeholderRef.current)
                return;
            placeholderRef.current.innerHTML = text.toString();
            if (inline)
                setWidth({ width: placeholderRef.current.offsetWidth });
            setContent(newText(text.toString()));
        }, delay));
    }, [text]);
    React.useEffect(function () { return function () { return clearTimeout(timeoutId); }; }, []);
    return (React.createElement(react_spring_1.animated.div, { className: "text-transition " + className, style: __assign(__assign(__assign({}, animatedProps), { whiteSpace: inline ? "nowrap" : "normal", display: inline ? "inline-block" : "block", position: "relative" }), style) },
        React.createElement("span", { ref: placeholderRef, style: { visibility: "hidden" }, className: "text-transition_placeholder" }),
        React.createElement("div", { className: "text-transition_inner", style: {
                overflow: noOverflow ? "hidden" : "visible",
                display: "block",
                position: "absolute",
                top: 0,
                left: 0,
                height: "100%",
                width: "100%"
            } }, transitions.map(function (_a) {
            var item = _a.item, props = _a.props, key = _a.key;
            return (React.createElement(react_spring_1.animated.div, { key: key, style: __assign(__assign({}, props), { position: "absolute" }) }, item.data));
        }))));
};
TextTransition.propTypes = {
    text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    direction: PropTypes.oneOf(["up", "down"]),
    inline: PropTypes.bool,
    noOverflow: PropTypes.bool,
    delay: PropTypes.number,
    className: PropTypes.string,
    style: PropTypes.object,
    springConfig: PropTypes.any,
};
TextTransition.defaultProps = {
    direction: "up",
    noOverflow: false,
    inline: false,
    springConfig: react_spring_1.config.default,
    delay: 0,
    className: "",
    style: {},
};
exports.default = TextTransition;
//# sourceMappingURL=TextTransition.js.map